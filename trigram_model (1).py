# -*- coding: utf-8 -*-
"""trigram_model.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k1IVsDwR5TV4dzK1xlIn0PCwK6P_eT5s
"""

import sys
from collections import defaultdict
import math
import random
import os
import os.path
"""
COMS W4705 - Natural Language Processing - Fall 2020 
Prorgramming Homework 1 - Trigram Language Models
Daniel Bauer
"""

def corpus_reader(corpusfile, lexicon=None): 
    with open(corpusfile,'r') as corpus: 
        for line in corpus: 
            if line.strip():
                sequence = line.lower().strip().split()
                if lexicon: 
                    yield [word if word in lexicon else "UNK" for word in sequence]
                else: 
                    yield sequence

def get_lexicon(corpus):
    word_counts = defaultdict(int)
    for sentence in corpus:
        for word in sentence: 
            word_counts[word] += 1
    return set(word for word in word_counts if word_counts[word] > 1)  


def get_ngrams(sequence, n):
    """
    COMPLETE THIS FUNCTION (PART 1)
    Given a sequence, this function should return a list of n-grams, where each n-gram is a Python tuple.
    This should work for arbitrary values of 1 <= n < len(sequence).
    """
    # pad the sequence with n-1 "START"'s and one "STOP"
    start = []
    stop = ["STOP"]
    if n >= 2:
      for i in range(n-1):
        start.append("START")
    else:
      start.append("START")
    sequence = start + sequence + stop
    
    # extract ngrams
    ngrams = []
    for i in range(len(sequence)-(n-1)):
      tup = tuple(sequence[i:i+n]) # each gram
      ngrams.append(tup)
  
    return ngrams


class TrigramModel(object):
    
    def __init__(self, corpusfile):
    
        # Iterate through the corpus once to build a lexicon 
        generator = corpus_reader(corpusfile)
        self.lexicon = get_lexicon(generator)
        self.lexicon.add("UNK")
        self.lexicon.add("START")
        self.lexicon.add("STOP")
    
        # Now iterate through the corpus again and count ngrams
        generator = corpus_reader(corpusfile, self.lexicon)
        self.count_ngrams(generator)


    def count_ngrams(self, corpus):
        """
        COMPLETE THIS METHOD (PART 2)
        Given a corpus iterator, populate dictionaries of unigram, bigram,
        and trigram counts. 
        """
   
        # each is a hashmap that maps n-gram to its count in the corpus
        self.unigramcounts = {} # might want to use defaultdict or Counter instead
        self.bigramcounts = {} 
        self.trigramcounts = {} 
        self.total_words = 0

        ##Your code here
        num_starts = 0
        for sentence in corpus:
          num_starts += 1

          # getting n-grams for counting
          unigrams = get_ngrams(sentence, 1)
          bigrams = get_ngrams(sentence, 2)
          trigrams = get_ngrams(sentence, 3)

          # iterating through each n-gram to count the number of occurences
          for uni in unigrams:
            if uni in self.unigramcounts:
              self.unigramcounts[uni]+=1
            else:
              self.unigramcounts[uni]=1
          
          for bi in bigrams:
            if bi in self.bigramcounts:
              self.bigramcounts[bi] +=1
            else:
              self.bigramcounts[bi] =1

          for tri in trigrams:
            if tri in self.trigramcounts:
              self.trigramcounts[tri]+=1  
            else:
              self.trigramcounts[tri]=1
        
        # computing bigram probs of type ("START", "word")
        self.unigramcounts[("START"),] = num_starts
        
        # computing trigram probs of type ("START", "START", "word")
        self.bigramcounts[("START", "START")] = num_starts

        # computing total words for use in unigram probs in part 3
        self.total_words+= sum(self.unigramcounts.values())

        return

    def raw_trigram_probability(self,trigram):
        """
        COMPLETE THIS METHOD (PART 3)
        Returns the raw (unsmoothed) trigram probability
        """
        
        if trigram not in self.trigramcounts:
            num = 0
        else:
            num = self.trigramcounts[trigram]
        
        if trigram[:2] not in self.bigramcounts:
            denom = 0
        else:
            denom = self.bigramcounts[trigram[:2]]
        
        if denom == 0: # unseen bigram
          return 0
        else:
          return num/denom
      
    def raw_bigram_probability(self, bigram):
        """
        COMPLETE THIS METHOD (PART 3)
        Returns the raw (unsmoothed) bigram probability
        """
        
        if bigram not in self.bigramcounts:
            num = 0
        else:
            num = self.bigramcounts[bigram]
        
        if bigram[:1] not in self.unigramcounts:
            denom = 0
        else:
            denom = self.unigramcounts[bigram[:1]]
        
        if denom == 0:
          return 0
        else:
          return num/denom
    
    def raw_unigram_probability(self, unigram):
        """
        COMPLETE THIS METHOD (PART 3)
        Returns the raw (unsmoothed) unigram probability.
        """
        #hint: recomputing the denominator every time the method is called
        # can be slow! You might want to compute the total number of words once, 
        # store in the TrigramModel instance, and then re-use it. 

        if unigram not in self.unigramcounts:
            num = 0
        else:
            num = self.unigramcounts[unigram]
        denom = self.total_words
        
        if denom == 0:
          return 0
        else:
          return num/denom

    def generate_sentence(self,t=20): 
        """
        COMPLETE THIS METHOD (OPTIONAL)
        Generate a random sentence from the trigram model. t specifies the
        max length, but the sentence may be shorter if STOP is reached.
        """
        return #result            

    def smoothed_trigram_probability(self, trigram):
        """
        COMPLETE THIS METHOD (PART 4)
        Returns the smoothed trigram probability (using linear interpolation). 
        """
        lambda1 = 1/3.0
        lambda2 = 1/3.0
        lambda3 = 1/3.0

        # using denser distributions of shorter ngrams to "fill in" sparse ngram distributions
        smoothed_trigram = lambda1*self.raw_trigram_probability(trigram)
        smoothed_bigram = lambda2*self.raw_bigram_probability(trigram[1:])
        smoothed_unigram = lambda3*self.raw_unigram_probability(trigram[2:])
        
        return smoothed_trigram+smoothed_bigram+smoothed_unigram
        
    def sentence_logprob(self, sentence):
        """
        COMPLETE THIS METHOD (PART 5)
        Returns the log probability of an entire sequence.
        """
        trigrams = get_ngrams(sentence, 3)
        log_probs = []
        summ = 0
        for tri in trigrams:
          log_probs.append(self.smoothed_trigram_probability(tri))

        for prob in log_probs:
          summ += math.log2(prob)

        return summ

    def perplexity(self, corpus):
        """
        COMPLETE THIS METHOD (PART 6) 
        Returns the log probability of an entire sequence.
        """
        l = 0
        M = 0

        for sentence in corpus:
          M += len(sentence)
          l += self.sentence_logprob(sentence)
        l = l*(1/M)
        perplexity = 2**(-l)
        return perplexity


def essay_scoring_experiment(training_file1, training_file2, testdir1, testdir2):

        model1 = TrigramModel(training_file1)
        model2 = TrigramModel(training_file2)

        total = 0
        correct = 0       
 
        for f in os.listdir(testdir1):
            pp_model1 = model1.perplexity(corpus_reader(os.path.join(testdir1, f), model1.lexicon))
            # .. 
            pp_model2 = model2.perplexity(corpus_reader(os.path.join(testdir1, f), model2.lexicon))
            if pp_model1 < pp_model2: # lower perplexity is bettter
              correct += 1
            total +=1

        for f in os.listdir(testdir2):
            pp_model2 = model2.perplexity(corpus_reader(os.path.join(testdir2, f), model2.lexicon))
            # .. 
            pp_model1 = model1.perplexity(corpus_reader(os.path.join(testdir2, f), model1.lexicon))
            if pp_model2 < pp_model1:
              correct += 1
            total +=1

        accuracy = correct/total

        return accuracy

if __name__ == "__main__":

    #model = TrigramModel(sys.argv[1]) 
    #model = TrigramModel("brown_train.txt")
    
    # put test code here...
    # or run the script from the command line with 
    # $ python -i trigram_model.py [corpus_file]
    # >>> 
    #
    # you can then call methods on the model instance in the interactive 
    # Python prompt. 

    # PART 1: testing extracting n-grams
    #print(get_ngrams(["natural","language","processing"],1))
    #print(get_ngrams(["natural","language","processing"],2))
    #print(get_ngrams(["natural","language","processing"],3))
    
    # PART 2: testing counting n-grams
    #print(model.trigramcounts[('START','START','the')])
    #print(model.bigramcounts[('START','the')])
    #print(model.unigramcounts[('the',)])
    
    # PART 6: Testing perplexity: 
    #dev_corpus = corpus_reader(sys.argv[2], model.lexicon)
    #dev_corpus = corpus_reader("brown_train.txt", model.lexicon)
    #dev_corpus = corpus_reader("brown_test.txt", model.lexicon)
    #pp = model.perplexity(dev_corpus)
    #print(pp)

    # Essay scoring experiment: 
    acc = essay_scoring_experiment('ets_toefl_data/train_high.txt', 'ets_toefl_data/train_low.txt', "ets_toefl_data/test_high", "ets_toefl_data/test_low")
    print(acc)

